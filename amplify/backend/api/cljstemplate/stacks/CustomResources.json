{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "An auto-generated nested stack.",
  "Metadata": {},
  "Parameters": {
    "AppSyncApiId": {
      "Type": "String",
      "Description": "The id of the AppSync API associated with this project."
    },
    "AppSyncApiName": {
      "Type": "String",
      "Description": "The name of the AppSync API",
      "Default": "AppSyncSimpleTransform"
    },
    "env": {
      "Type": "String",
      "Description": "The environment name. e.g. Dev, Test, or Production",
      "Default": "NONE"
    },
    "S3DeploymentBucket": {
      "Type": "String",
      "Description": "The S3 bucket containing all deployment assets for the project."
    },
    "S3DeploymentRootKey": {
      "Type": "String",
      "Description": "An S3 key relative to the S3DeploymentBucket that points to the root\nof the deployment directory."
    }
  },
  "Resources": {
    "EmptyResource": {
        "Type": "Custom::EmptyResource",
        "Condition": "AlwaysFalse"
    },
    "SQSDataSourceRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
            "RoleName": {
                "Fn::If": [
                    "HasEnvironmentParameter",
                    {
                        "Fn::Join": [
                            "-",
                            [
                                "SQSDataSourceRole",
                                {
                                    "Ref": "AppSyncApiId"
                                },
                                {
                                    "Ref": "env"
                                }
                            ]
                        ]
                    },
                    {
                        "Fn::Join": [
                            "-",
                            [
                                "SQSDataSourceRole",
                                {
                                    "Ref": "AppSyncApiId"
                                }
                            ]
                        ]
                    }
                ]
            },
            "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "appsync.amazonaws.com"
                        },
                        "Action": "sts:AssumeRole"
                    }
                ]
            },
            "Policies": [
                {
                    "PolicyName": "SQSSendMessage",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "sqs:SendMessage"
                                ],
                                "Resource": [
                                    {
                                        "Fn::Sub": "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*"
                                    }
                                ]
                            }
                        ]
                    }
                }
            ]
        }
    },
    "SQSHttpDataSource": {
        "DependsOn": [
            "SQSDataSourceRole"
        ],
        "Type": "AWS::AppSync::DataSource",
        "Properties": {
            "ApiId": {
                "Ref": "AppSyncApiId"
            },
            "Name": "SQSHttpDataSource",
            "Description": "SQS API",
            "Type": "HTTP",
            "ServiceRoleArn": {
                "Fn::GetAtt": [
                    "SQSDataSourceRole",
                    "Arn"
                ]
            },
            "HttpConfig": {
                "Endpoint": {
                    "Fn::Sub": "https://sqs.${AWS::Region}.amazonaws.com"
                },
                "AuthorizationConfig": {
                    "AuthorizationType": "AWS_IAM",
                    "AwsIamConfig": {
                        "SigningRegion": {
                            "Fn::Sub": "${AWS::Region}"
                        },
                        "SigningServiceName": "sqs"
                    }
                }
            }
        }
    },
    "SendMessageFunction": {
        "DependsOn": [
            "SQSHttpDataSource"
        ],
        "Type": "AWS::AppSync::FunctionConfiguration",
        "Properties": {
            "ApiId": {
                "Ref": "AppSyncApiId"
            },
            "DataSourceName": "SQSHttpDataSource",
            "FunctionVersion": "2018-05-29",
            "Name": "SendMessageFunction",
            "RequestMappingTemplateS3Location": {
                "Fn::Sub": [
                    "s3://${S3DeploymentBucket}/${S3DeploymentRootKey}/resolvers/Function.SendMessage.req.vtl",
                    {
                        "S3DeploymentBucket": {
                            "Ref": "S3DeploymentBucket"
                        },
                        "S3DeploymentRootKey": {
                            "Ref": "S3DeploymentRootKey"
                        }
                    }
                ]
            },
            "ResponseMappingTemplateS3Location": {
                "Fn::Sub": [
                    "s3://${S3DeploymentBucket}/${S3DeploymentRootKey}/resolvers/Function.SendMessage.res.vtl",
                    {
                        "S3DeploymentBucket": {
                            "Ref": "S3DeploymentBucket"
                        },
                        "S3DeploymentRootKey": {
                            "Ref": "S3DeploymentRootKey"
                        }
                    }
                ]
            }
        }
    },
    "EnqueueEmailResolver": {
        "DependsOn": [
            "SendMessageFunction"
        ],
        "Type": "AWS::AppSync::Resolver",
        "Properties": {
            "ApiId": {
                "Ref": "AppSyncApiId"
            },
            "TypeName": "Mutation",
            "FieldName": "enqueueEmail",
            "Kind": "PIPELINE",
            "PipelineConfig": {
                "Functions": [
                    {
                        "Fn::GetAtt": [
                            "SendMessageFunction",
                            "FunctionId"
                        ]
                    }
                ]
            },
            "RequestMappingTemplate": {
                "Fn::Sub": [
                    "#set( $sqs = {\"path\":\"/${accountId}/${queueName}\"} )\n$util.qr($ctx.stash.put(\"sqs\", $sqs))\n{}",
                    {
                        "accountId": {
                            "Ref": "AWS::AccountId"
                        },
                        "queueName": {
                            "Fn::If": [
                                "HasEnvironmentParameter",
                                {
                                    "Fn::Join": [
                                        "-",
                                        [
                                            "SendEmail",
                                            {
                                                "Ref": "AppSyncApiId"
                                            },
                                            {
                                                "Ref": "env"
                                            },
                                            ".fifo"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "-",
                                        [
                                            "SendEmail",
                                            {
                                                "Ref": "AppSyncApiId"
                                            },
                                            ".fifo"
                                        ]
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "ResponseMappingTemplate": "$util.toJson($ctx.result)"
        }
    }
},
  "Conditions": {
    "HasEnvironmentParameter": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "env"
            },
            "NONE"
          ]
        }
      ]
    },
    "AlwaysFalse": {
      "Fn::Equals": ["true", "false"]
    }
  },
  "Outputs": {
    "EmptyOutput": {
      "Description": "An empty output. You may delete this if you have at least one resource above.",
      "Value": ""
    }
  }
}
